"""
convert processed cncvs dataset to wav2lip format.
"""
import pickle
import json
import os
import argparse
import subprocess
import shutil
import concurrent.futures
from traceback import print_exc
import cv2
import numpy as np

from alignment import Alignment


def gen_src_data(root, data_list_path):
    with open(data_list_path) as f:
        lines = f.readlines()
    for line in lines:
        line = line.strip()
        data_path = line.split()[0]
        id, vid = data_path.split('/')
        yield id, vid, os.path.join(root, data_path)
        
        
def get_aligned_lms(ori_lms_path, to_size=512):
    with open(ori_lms_path) as f:
        ori_lms = json.load(f)
    aligned_lms = []
    for frame_ori_lms in ori_lms:
        frame_ori_lms = np.array(frame_ori_lms, dtype=np.float32)
        align = Alignment(frame_ori_lms, to_size)
        frame_aligned_lms = align.get_aligned_lms()
        frame_aligned_lms = frame_aligned_lms.astype(np.float32).tolist()
        aligned_lms.append(frame_aligned_lms)
    return aligned_lms


def worker(data_path, to_size):
    landmarks_path = os.path.join(data_path, 'landmarks.json')
    out_path = os.path.join(data_path, 'aligned_lms.json')
    lms = get_aligned_lms(landmarks_path, to_size)
    with open(out_path, 'w') as f:
        json.dump(lms, f)
    # print(out_path)


def convert_dataset(dataset_root, data_list_path, to_size, max_workers=8):
    src_datas = list(gen_src_data(dataset_root, data_list_path))
    id_num = len(set(map(lambda x: x[0], src_datas)))
    
    print('Total video num:', len(src_datas))
    print('Total id num:', id_num)
    print('Dataset root:', dataset_root)
    print('To size:', to_size)
    print('Processing...')

    with concurrent.futures.ProcessPoolExecutor(max_workers=max_workers) as executor:
        futures = []
        for id, vid, data_path in src_datas:
            f = executor.submit(worker, data_path, to_size)
            futures.append(f)
        
        for i, f in enumerate(concurrent.futures.as_completed(futures), 1):
            try:
                f.result()
            except BaseException:
                print_exc()
                executor.shutdown(wait=False)
                exit(0)
            if i % 100 == 0:
                print(f'{i} / {len(src_datas)} completed.')
    print('Finished.')


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--dataset_root', type=str, required=True, help='root of processed dataset.')
    parser.add_argument('--data_list_path', type=str, required=True, help='root of result filelist generated by download_and_process.py')
    parser.add_argument('--to_size', type=int, required=True, help='resize each image to specific size')
    # parser.add_argument('--out_path', type=str, required=True, help='Output dict pkl path')
    parser.add_argument('--max_workers', type=int, help='max num of workers of process pool')
    args = parser.parse_args()
    
    dataset_root = args.dataset_root
    data_list_path = args.data_list_path
    max_workers = args.max_workers
    to_size = args.to_size
    # out_path = args.out_path
    
    convert_dataset(dataset_root, data_list_path, to_size, max_workers=max_workers)


if __name__ == '__main__':
    main()
