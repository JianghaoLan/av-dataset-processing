"""
convert processed cncvs dataset to wav2lip format.
"""
import os
import argparse
import subprocess
import shutil
import concurrent.futures
from traceback import print_exc
import cv2


def gen_src_data(root, data_list_path):
    with open(data_list_path) as f:
        lines = f.readlines()
    for line in lines:
        line = line.strip()
        data_path = line.split()[0]
        id, vid = data_path.split('/')
        yield id, vid, os.path.join(root, data_path)
    # result_dict = {}
    # with open(data_list_path) as f:
    #     for line in f.readlines():
    #         vid, result_desp = line.strip().split(' ', 1)

    #         assert result_desp in _possible_result_desp
    #         if len(vid.split('_')) == 3:
    #             assert vid not in result_dict

    #         result_dict[vid] = result_desp

    # for id in os.listdir(root):
    #     id_path = os.path.join(root, id)
    #     if not os.path.isdir(id_path):
    #         continue

    #     for vid in os.listdir(id_path):
    #         assert vid in result_dict
    #         if result_dict[vid] == 'Success':
    #             data_path = os.path.join(id_path, vid)
    #             assert os.path.isdir(data_path)
    #             assert os.path.isfile(os.path.join(data_path, 'video.mp4'))
    #             assert os.path.isfile(os.path.join(data_path, 'audio.wav'))
    #             assert os.path.isfile(os.path.join(data_path, 'landmarks.json'))
    #             assert os.path.isfile(os.path.join(data_path, 'rois.json'))
    #             assert os.path.isfile(os.path.join(data_path, 'ori_video.mp4'))
    #             yield id, vid, data_path


def convert_video_to_images(src_video_path, dst_dir):
    # cmd = ['ffmpeg', '-i', src_video_path, os.path.join(dst_dir, r'%d.png')]   # 使用png无损图片格式
    # try:
    #     subprocess.run(cmd, check=True, text=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
    # except subprocess.CalledProcessError as e:
    #     print('[Error] An error happened when convert video. FFmpeg output:')
    #     print(e.stdout)
    #     raise e

    cap = cv2.VideoCapture(src_video_path)
    if not cap.isOpened():
        print("Error: Unable to open video file.")
        return
    frame_count = 0
    while True:
        ret, frame = cap.read()
        if not ret:
            break
        output_path = os.path.join(dst_dir, f"{frame_count}.png")
        cv2.imwrite(output_path, frame)
        frame_count += 1
    # 释放视频对象
    cap.release()


def convert_one(data_path, to_path, cp_rois_and_lms=False):
    if os.path.exists(to_path):
        shutil.rmtree(to_path)
    os.makedirs(to_path)
    
    video_path = os.path.join(data_path, 'video.mp4')
    audio_path = os.path.join(data_path, 'audio.wav')
    landmarks_path = os.path.join(data_path, 'landmarks.json')
    rois_path = os.path.join(data_path, 'rois.json')
    
    convert_video_to_images(video_path, to_path)
    shutil.copyfile(audio_path, os.path.join(to_path, 'audio.wav'))
    if cp_rois_and_lms:
        shutil.copyfile(landmarks_path, os.path.join(to_path, 'landmarks.json'))
        shutil.copyfile(rois_path, os.path.join(to_path, 'rois.json'))


def convert_dataset(dataset_root, output_root, data_list_path, cp_rois_and_lms=False, max_workers=8):
    src_datas = list(gen_src_data(dataset_root, data_list_path))
    id_num = len(set(map(lambda x: x[0], src_datas)))
    
    print('Total video num:', len(src_datas))
    print('Total id num:', id_num)
    print('From dir:', dataset_root)
    print('To dir:', output_root)
    print('Processing...')

    with concurrent.futures.ProcessPoolExecutor(max_workers=max_workers) as executor:
        futures = []
        for id, vid, data_path in src_datas:
            dst_dir = os.path.join(output_root, id, vid)

            f = executor.submit(convert_one, data_path, dst_dir, cp_rois_and_lms)
            # convert_one(data_path, dst_dir, cp_rois_and_lms)
            futures.append(f)
        
        for i, f in enumerate(concurrent.futures.as_completed(futures), 1):
            try:
                f.result()
            except BaseException:
                print_exc()
                executor.shutdown(wait=False)
                exit(0)
            if i % 100 == 0:
                print(f'{i} / {len(src_datas)} completed.')
    print('Finished.')


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--dataset_root', type=str, required=True, help='root of processed dataset.')
    parser.add_argument('--output_root', type=str, required=True, help='root of output wav2lip format dataset.')
    parser.add_argument('--data_list_path', type=str, required=True, help='root of result filelist generated by download_and_process.py')
    parser.add_argument('--copy_rois_and_lms', action='store_true', help='copy rois and landmarks to the target dataset.')
    parser.add_argument('--max_workers', type=int, help='max num of workers of process pool')
    args = parser.parse_args()
    
    dataset_root = args.dataset_root
    output_root = args.output_root
    data_list_path = args.data_list_path
    cp_rois_and_lms = args.copy_rois_and_lms
    max_workers = args.max_workers
    
    convert_dataset(dataset_root, output_root, data_list_path, cp_rois_and_lms, max_workers=max_workers)


if __name__ == '__main__':
    main()
